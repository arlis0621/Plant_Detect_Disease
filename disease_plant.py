# -*- coding: utf-8 -*-
"""Disease_plant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ntHw8pWWWYrHVYr_0o87-MiKPHXQDKJK
"""

import os

# List files and folders in /content
content_dir = '/content'
files_and_folders = os.listdir(content_dir)

print("Contents of /content directory:")
for item in files_and_folders:
    print(item)

import os

output_folder = '/content/plant_images_pinanalytix'

# Create the directory if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

print(f"Created folder: {output_folder}")

import zipfile

zip_file = '/content/Plant_images_pianalytix.zip'  # Update this path if necessary

# Extract the ZIP file to the output folder
with zipfile.ZipFile(zip_file, 'r') as zip_ref:
    zip_ref.extractall(output_folder)

print(f"Unzipped to: {output_folder}")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.image import imread
import cv2
import random
import os
from os import listdir
from PIL import Image
from sklearn.preprocessing import label_binarize,  LabelBinarizer
from keras.preprocessing import image
from keras.preprocessing.image import img_to_array, array_to_img
from keras.optimizers import Adam
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Flatten, Dropout, Dense
from sklearn.model_selection import train_test_split
from keras.models import model_from_json
from keras.utils import to_categorical

plt.figure(figsize=(12,12))
path="/content/plant_images_pinanalytix/Plant_images_pianalytix/Potato___Early_blight"
for i in range(1,17):
  plt.subplot(4,4,i)
  plt.tight_layout()
  rand_img=imread(path+"/"+random.choice(os.listdir(path)))
  plt.imshow(rand_img)
  plt.xlabel(rand_img.shape[1], fontsize = 10)
  plt.ylabel(rand_img.shape[0], fontsize = 10)

#converting images to array
def convert_image_to_array(image_dir):
  try:
    image=cv2.imread(image_dir)
    if image is not None:
      image=cv2.resize(image,(256,256))
      return img_to_array(image)
    else:
      return np.array([])
  except Exception as e:
    print(f"Error: {e}")
    return None

dir="/content/plant_images_pinanalytix/Plant_images_pianalytix"
root_dir=listdir(dir)
image_list,label_list=[],[]
all_labels=['Corn-common_rust','Potato-Early_blight','Tomato-Bacterial_spot']
binary_labels=[0,1,2]
temp=-1
for directory in root_dir:
  plant_image_list=listdir(f"{dir}/{directory}")
  temp+=1
  for files in plant_image_list:
    image_path=f"{dir}/{directory}/{files}"
    image_list.append(convert_image_to_array(image_path))
    label_list.append(binary_labels[temp])

#see the class count
label_counts=pd.DataFrame(label_list).value_counts()
label_counts.head()

image_list[0].shape #this is the shape of matrix for a single mimage

label_list=np.array(label_list)
label_list.shape

x_train,x_test,y_train,y_test=train_test_split(image_list,label_list,test_size=0.2,random_state=10)

x_train=np.array(x_train,dtype=np.float16)/255.0
x_test=np.array(x_test,dtype=np.float16)/255.0
x_train =x_train.reshape(-1,256,256,3)
x_test=x_test.reshape(-1,256,256,3)

y_train=to_categorical(y_train)
y_test=to_categorical(y_test)

model=Sequential()
model.add(Conv2D(32,(3,3),padding="same",input_shape=(256,256,3),activation="relu"))
model.add(MaxPooling2D(pool_size=(3,3)))
model.add(Conv2D(64,(3,3),padding="same",activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(64,activation="relu"))
model.add(Dense(3,activation="softmax"))
model.summary()

model.compile(loss='categorical_crossentropy',optimizer=Adam(learning_rate=0.0001),metrics=['accuracy'])

history=model.fit(x_train,y_train,batch_size=128,epochs=5,validation_data=(x_test,y_test))

# Save the entire model (architecture, weights, optimizer) in the .h5 format
model.save('plant_disease.h5')

# Save the model architecture to a JSON file
model_json = model.to_json()
with open("plant_model.json", "w") as json_file:
    json_file.write(model_json)

# Save only the model weights
model.save_weights('plant_model_weights.h5')

y_pred=model.predict(x_test)



img=array_to_img(x_test[0])
print("orginal",all_labels[np.argmax(y_test[0])])
print("predicted",all_labels[np.argmax(y_pred[0])])

